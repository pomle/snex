<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>SNEX - Gamepads for Smartphones</title>
  <link href="https://fonts.googleapis.com/css?family=Jura" rel="stylesheet">
  <link href="/style.css" rel="stylesheet">
  <link href="/demo.css" rel="stylesheet">
  <link media="(max-width: 800px)" href="/mobile.css" rel="stylesheet">

  <meta name="theme-color" content="#de4d5f" />
  <meta name="viewport" content="width=device-width, user-scalable=1.0, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0">

  <meta property="og:title" content="Gamepads for Smartphones - SNEX" />
  <meta property="og:description" content="Play games on the big screen with a gamepad on your Smartphone. Listen to JSON events over WebRTC. Implement for your game in minutes!" />
  <meta property="og:url" content="<%= URL_SELF %>/" />
  <meta property="og:image" content="<%= URL_SELF %>/images/og-image.png" />

  <script src="/lib/peerjs/0.3/peer.min.js"></script>
  <script src="/dist/0.0.2/snex.js"></script>
  <script src="/scripts/space-game.js"></script>
  <script src="/scripts/demo.js"></script>
</head>
<body
  data-api-key="<%= api_key; %>"
  data-controllers="<%= controllers; %>"
>
  <section class="headline">
    <img src="/images/snex-logo.svg" alt="Snex" width="341" height="96"/>
    <h2>Play games on the big screen with a gamepad on your Smartphone</h2>
  </section>

  <section class="explanation">
    <ul>
      <li>
        <h2>What is it?</h2>

        <p>
          We provide gamepads for smartphones that emit events when interacted with. Developers can subscribe to events to control their games. Events are transmitted using <a href="http://peerjs.com/">Peer.js</a> via <a href="https://webrtc.org/">WebRTC</a>.
        </p>

        <p>
          SNEX is open source and we encourage contributions.<br>
          Please visit us on <a href="https://github.com/snex-io/snex-web">GitHub</a>.
        </p>
      </li>

      <li>
        <div class="controllers">
          <div class="android">
            <img src="/controllers/snes.svg" alt="SNES" />
          </div>

          <div class="android">
            <img src="/controllers/nes.svg" alt="NES" />
          </div>
        </div>
      </li>
    </ul>
  </section>


  <section class="how">
    <a href="#how-does-it-work" name="how-does-it-work">
      <h2>How it works</h2>
    </a>

    <ul>
      <li>
        <h3>Create Session</h3>

        <img src="/images/how1.svg">

        <p>
          First a developer must create a unique session. This session is represented by a URL which is associated with the type of gamepad desired and where to send signals once a user connects.
        </p>
      </li>

      <li>
        <h3>Join Session</h3>

        <img src="/images/how2.svg">

        <p>
          By going to the URL, a device joins a session and will start sending events based on human interaction with the gamepads.
        </p>
      </li>

      <li>
        <h3>Handle events</h3>

        <img src="/images/how3.svg">

        <p>
          When a device joins a session the developer will receive an event, followed by events for every user interaction. The developer can process the events to control their applications.
        </p>
      </li>
    </ul>

  </section>

  <section class="demo">
    <a href="#try-it" name="try-it">
      <h2>Try it!</h2>
    </a>

    <p>
      Use the input below to control the game or open the URL on your Android.
      You can also try our multiplayer <a href="/demos/tetris">Tetris + SNEX</a> implementation.
    </p>

    <div class="controller-url">
      Go to <span class="link"></span> in your smartphone.
    </div>

    <div class="game">
      <div class="screen">
        <div class="log"></div>
        <canvas width="320" height="240"></canvas>
      </div>
    </div>

    <div class="input">
      <div class="skip prev">
          <button data-skip="-1">
            <img src="/images/arrow.svg" alt="Previous" />
          </button>
      </div>

      <div class="skip next">
          <button data-skip="1">
            <img src="/images/arrow.svg" alt="Next" />
          </button>
      </div>

      <div class="overlay">
        <div class="controllers">
          <template class="controller">
            <div class="controller hidden">
              <div class="window">
                <iframe src=""></iframe>
              </div>
            </div>
          </template>

        </div>
      </div>
    </div>
  </section>

  <section class="support">
    <a href="#support" name="support">
      <h2>Support</h2>
    </a>

    <p>
      SNEX currently support browsers supporting <a href="https://webrtc.org/">WebRTC</a>. To see which browsers currently have implemented support for WebRTC, consult <a href="http://iswebrtcreadyyet.com/">this chart</a>. Support for WebRTC has been <a href="https://www.google.com/search?q=safari%20webrtc%20support">officially announced</a> to be under development for iOS/Safari. Once release, SNEX will support iOS.
    </p>
  </section>

  <!--
  <section class="demos">
    <a href="#demos" name="demos">
      <h2>Demos</h2>
    </a>

    <ul>
      <li>
        <a href="/demos/tetris">
          <h3>Tetris</h3>
          <img src="/images/tetris.png" alt="Tetris <3 SNEX" />
        </a>

        <p>Multiplayer side by side Tetris implementation</p>
      </li>

      <li>
        <a href="/demos/diag">
          <h3>Diagnostics</h3>
          <img src="/images/diag.png" alt="Dianositcs" />
        </a>

        <p>Simple implementation to showcase what is being send and received.</p>
      </li>
    </ul>
  </section>
  -->

  <section class="get-started">
    <a href="#get-started" name="get-started">
      <h2>Get started</h2>
    </a>

    <p>
      Follow the steps below or have a look at our <a href="http://snex.io/demos/minimal/">Minimal single HTML page implementation</a>. View HTML source code to see how it works.
    </p>

    <ul>
      <li>
        <h3>1) Include <a href="http://peerjs.com/">Peer.js</a></h3>

        <p>We depend on Peer.js to easily setup the connection between the user and your project.</p>
        <p>
          You will have to include their library on your site to use SNEX. We also recommend that you
          create your own API key with <a href="http://peerjs.com/">Peer.js</a>.
        </p>

        <code>
          <%= `<script src="http://cdn.peerjs.com/0.3/peer.min.js"></script>` %>
        </code>

        <p>
          For more details on how to use Peer.js, visit their <a href="http://peerjs.com/docs/#start">Getting Started</a> guide.
        </p>
      </li>
      <li>
        <h3>2) Create URL</h3>

        <p>
          Open a channel using <a href="http://peerjs.com/">Peer.js</a>. Then using
          your API key and the channel Id, create a unique URL to SNEX.
        </p>

        <code>
          function createURL(key, channel, pad) {<br/>
          &nbsp;&nbsp;return `http://snex.io/${pad}/?key=${key}&amp;id=${id}`;<br/>
          }<br/>
          <br/>
          var API_KEY = 'lwjd5qra8257b9';<br/>
          var peer = new Peer({key: API_KEY});<br/>
          peer.on('open', function(id) {<br/>
          &nbsp;&nbsp;var url = createURL(API_KEY, id, 'nes');<br/>
          &nbsp;&nbsp;console.info('Go to url', url);<br/>
          });
        </code>

        <p>
          You may also use our URL-shorterner service that can be accessed via our tiny SNEX lib.
          Include it in your browser or use our <a href="https://www.npmjs.com/package/snex">NPM package</a>.
        </p>

        <code>
          <%= `<script src="http://cdn.snex.io/dist/0.0.1/snex.js"></script>` %>
        </code>

        <p>
          Then you can create short URLs like <code>snex.io/HFJA</code> that are active for 5 minutes.
        </p>

        <code>
          var API_KEY = 'lwjd5qra8257b9';<br/>
          var peer = new Peer({key: API_KEY});<br/>
          peer.on('open', function(id) {<br/>
          &nbsp;&nbsp;snex.createSession(API_KEY, id, 'nes')<br/>
          &nbsp;&nbsp;&nbsp;&nbsp;.then(session => {<br/>
          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log('Go to url', session.url);<br/>
          &nbsp;&nbsp;&nbsp;&nbsp;});<br/>
          });
        </code>
      </li>

      <li>
        <h3>3) Open URL on smartphone</h3>

        <p>
          Get URL to client device via SMS, chat, email, or just type it into Firefox, Google Chrome or WebRTC compatible browser.
          When the URL is loaded a gamepad will be displayed and the client will connect to your service.
        </p>
      </li>

      <li>
        <h3>4) Handle events</h3>

        <p>
          When a user loads the gamepad the <code>connection</code> event will trigger in Peer.js. You can use this to setup a new player.
        </p>

        <p>
          When user interaction is detected the <code>data</code> event on the connection will fire. The gamepad will send messages in JSON format containing the details of the interaction. It's up to you what to do with them. For more information on events see our <a href="https://github.com/snex-io/snex-web/tree/master/docs/events">events docs</a>.
        </p>

        <code>
          peer.on('connection', function(conn) {<br/>
          &nbsp;&nbsp;conn.on('data', function(data) {<br/>
          &nbsp;&nbsp;&nbsp;&nbsp;console.log('Key %s got state %s', data.key, data.state);<br/>
          &nbsp;&nbsp;});<br/>
          });
        </code>

        <p>
          For more details <a href="https://github.com/snex-io/snex-web/tree/master/docs">Read our docs</a> or have a look at our <a href="https://github.com/pomle/snex-tetris/blob/master/main.js">Tetris Source Code</a>.
        </p>
      </li>
    </ul>
  </section>

  <footer>
    Created by <a href="https://github.com/pomle">Pontus Alexander</a> &amp; <a href="http://www.ethandirks.com">Ethan Dirks</a>
  </footer>

  <script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-89979098-1', 'auto');
    ga('send', 'pageview');
  </script>
</body>
</html>
